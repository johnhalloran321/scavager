from __future__ import division
import argparse
from . import main
import pkg_resources
import logging

def run():


    parser = argparse.ArgumentParser(
        description='postsearch analysis of peptides and proteins',
        epilog='''

    Example usage
    -------------
    $ scavager input.pep.xml -prefix DECOY_ -fdr 1.0
    -------------
    ''',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('file', nargs='+', help='input pepXML file')
    parser.add_argument('-p', '--prefix', help='decoy prefix', default='DECOY_')
    parser.add_argument('-i', '--infix', help='decoy infix if database was generated by SearchGUI', default=False)
    parser.add_argument('-o', '--output', help='path to output folder', default=False)
    parser.add_argument('-db', '--database', help='path to fasta file. \
                        Used for sequence coverage and LFQ calculation', default=False)
    parser.add_argument('-fdr', '--fdr', help='false discovery rate in %%', default=1.0, type=float)
    parser.add_argument('-e', '--enzyme', help='Used only for msgf+ and Morpheus search engines.\
    Cleavage rule in quotes! X!Tandem style for cleavage rules. Examples:\
    "[RK]|{P}" means cleave after R and K, but not before P;\
    "[X]|[D]" means cleave before D;\
    "[RK]|{P},[M]|[X]" means mix of trypsin and cnbr', default='[RK]|{P}')
    parser.add_argument('-ap', '--allowed-peptides', help='Path to file with peptides considered in postsearch analysis.\
    Sequences must be separated by new line. For example, it can be variant peptides and their decoys in case \
    of proteogenomics searches for group-specific FDR calculation')
    parser.add_argument('-gp', '--group-prefix', help='Protein prefix for group specific filtering. For example, if `mut_` prefix, peptides from to mut_ or DECOY_mut_ \
    proteins will be reported. This can useful in proteogenomic searches for group-specific FDR calculation')
    parser.add_argument('-sf', '--separate-figures', action='store_true', help='save figures as separate files')
    parser.add_argument('-u', '--union', action='store_true', help='Produce a summary table where IDs are pooled from all files (requires -db)')
    parser.add_argument('--debug', action='store_true', help='Enable debugging output')
    parser.add_argument('-v', '--version', action='version', version='%s' % (pkg_resources.require("scavager")[0], ))
    args = vars(parser.parse_args())
    logging.basicConfig(format='%(levelname)9s: %(asctime)s %(message)s',
            datefmt='[%H:%M:%S]', level=[logging.INFO, logging.DEBUG][args['debug']])
    main.process_files(args)


if __name__ == '__main__':
    run()
